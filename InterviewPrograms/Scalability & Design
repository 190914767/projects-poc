https://www.tutorialspoint.com/distributed_dbms/distributed_dbms_commit_protocols.htm
https://www.quora.com/Distributed-Systems-What-is-a-simple-explanation-of-the-Paxos-algorithm

Distributed Caching:
 1. Consistent Hashing
 2. Fail-over scenario
 3. Replication
 4. Security
 5. Configuring cache frameworks
 6. Redis vs Memcached
 7. Hot/Cold cache
 8. Frameworks and respective clients
 9. Cache Eviction Policy
 10. H/W Resources
 
 Notes:
 1. Don't Cache the Session States!
    a. Poor design may allow other client sessions to interfere
    b. Session states are unpredictable with updates should happen frequently
    c. Caching involves optimized concurrency which means no-concurrency causing long-waits for update.
    d. Sessions are treated as write-heavy
    e. The number of stored sessions can increase if several browser instances are opened
    f. In case of failover, the session is lost and storing it on database would be heavy. 
    Challenging w.r.t resources if replication is applied as session is primary on the client side during application usage.
    g. Causes performance degradation halting read operations on the cache server during appending operation.
   Source: http://ahuwanya.net/blog/post/Why-Session-State-Should-Not-Be-Stored-In-A-Distributed-Cache
  
 2. Memcache to Couchbase and vice versa! [Memcache vs Couchbase]
  Source: http://www.shallop.com/blog/couchbase-vs-memcached
  Source: https://www.couchbase.com/memcached
  
3. How to monitor Memcached?
  Source: https://blog.serverdensity.com/monitor-memcached/
